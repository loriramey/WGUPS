# This file is dual licensed under the terms of the Apache License, Version
# 2.0, and the BSD License. See the LICENSE file in the root of this repository
# for complete details.


class InfinityType:
    def __repr__(self) -> str:

    """
      repr   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return "Infinity"

    def __hash__(self) -> int:

    """
      hash   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return hash(repr(self))

    def __lt__(self, other: object) -> bool:

    """
      lt   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return False

    def __le__(self, other: object) -> bool:

    """
      le   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return False

    def __eq__(self, other: object) -> bool:

    """
      eq   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return isinstance(other, self.__class__)

    def __gt__(self, other: object) -> bool:

    """
      gt   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return True

    def __ge__(self, other: object) -> bool:

    """
      ge   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return True

    def __neg__(self: object) -> "NegativeInfinityType":

    """
      neg   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return NegativeInfinity


Infinity = InfinityType()


class NegativeInfinityType:
    def __repr__(self) -> str:

    """
      repr   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return "-Infinity"

    def __hash__(self) -> int:

    """
      hash   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return hash(repr(self))

    def __lt__(self, other: object) -> bool:

    """
      lt   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return True

    def __le__(self, other: object) -> bool:

    """
      le   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return True

    def __eq__(self, other: object) -> bool:

    """
      eq   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return isinstance(other, self.__class__)

    def __gt__(self, other: object) -> bool:

    """
      gt   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return False

    def __ge__(self, other: object) -> bool:

    """
      ge   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return False

    def __neg__(self: object) -> InfinityType:

    """
      neg   function.

    Args:
        (describe parameters here)

    Returns:
        (describe return value here)
    """
            return Infinity


NegativeInfinity = NegativeInfinityType()
